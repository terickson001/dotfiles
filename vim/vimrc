syntax on
filetype off
"" Vundle Setup
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'L9'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" General Plugins
Plugin 'ervandew/supertab'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-abolish'
Plugin 'easymotion/vim-easymotion'
Plugin 'bling/vim-airline'
Plugin 'yggdroot/indentline'
Plugin 'airblade/vim-gitgutter'
Plugin 'godlygeek/tabular'
Plugin 'majutsushi/tagbar'
Plugin 'AutoTag'
Plugin 'danro/rename.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'delimitMate.vim'
" Plugin 'valloric/YouCompleteMe'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'shougo/unite.vim'
Plugin 'shougo/vimproc.vim'
Plugin 'rargo/vim-tab'
Plugin 'chiedo/vim-case-convert'
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'terickson001/h2cppx'
Plugin 'junegunn/goyo.vim'

" Integration
Plugin 'tikhomirov/vim-glsl'
Plugin 'justinmk/vim-syntax-extra'
Plugin 'a.vim'
Plugin 'othree/html5.vim'
Plugin 'alvan/vim-closetag'
Plugin 'raichoo/haskell-vim'
Plugin 'brainfuck-syntax'
Plugin 'terickson001/vim-odin'
Plugin 'alisdair/vim-armasm'

" Color Schemes
Plugin 'chriskempson/base16-vim'
Plugin 'dylanaraps/wal'
Plugin 'arcticicestudio/nord-vim'

call vundle#end()            " required
filetype plugin indent on    " required
"" End Vundle Setup

set mouse=a
" Alt key fix
let c='a'
while c <= 'z'
    exec "set <A-".c.">=\e".c
    exec "imap \e".c." <A-".c.">"
    let c = nr2char(1+char2nr(c))
endw

" <C-;> Fix
map  <Esc>[; <C-;>
map! <Esc>[; <C-;>

" Emacs style indent
map <silent> <Tab> ==
imap <silent> <Tab> <C-O>==

set timeout

set nocul ts=4 sw=4 sts=4 et hls dg

set term=xterm-256color
let g:base16colorspace="256"
set t_Co=256
set t_ZH=[3m
set t_ZR=[23m
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"
if $BASE16 == 1
    colorscheme base16-ocean
else
    colorscheme shblah
endif

set number
" set relativenumber
set nowrap

set showcmd
set updatetime=2000

set ignorecase
set smartcase

set nodigraph

" Language-Specific settings
au Filetype python set ts=4 sw=4 et

" Move Lines
nnoremap <ESC>j :m .+v:count1<CR>==
nnoremap <ESC>k :m .-1-v:count1<CR>==
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv

" Clear Search
nnoremap <Leader>cls :let @/=""<CR>

" Tagbar Keymaps
nnoremap <silent> <special> <F8> :if &filetype ==# 'tagbar' <Bar> :exe "TagbarClose" <Bar> :else <Bar> :exe "TagbarOpen" "jf" <Bar> :endif<CR>
let g:tagbar_width=30

" Remove trailing whitespace
nnoremap <silent> <Leader>tr :%s/\s\+$//g<CR>:let @/=""<CR>

" .h <-> .c
nnoremap <F4> :A<CR>

" Nerdtree binding
nnoremap <silent> <special> <F2> :if &filetype ==# 'nerdtree' <Bar> :NERDTreeToggle <Bar> :else <Bar> :NERDTreeFocus <Bar> :endif<CR>

" Tagbar binding

" netrw settings
let g:netrw_usetab=1
let g:netrw_liststyle=3
let g:netrw_winsize=15

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

nnoremap <Leader>s :SyntasticToggleMode<CR>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatusLineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {'mode': 'passive'}

" NERDCommenter Settings
let g:NERDAltDelims_haskell = 1
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDDefaultNesting = 0
let g:NERDCustomDelimiters = { 'armasm': { 'left': '@'}, 'odin': { 'left': '//', 'leftALT': '/*', 'rightALT': '*/'} }

imap <C-;> <Plug>NERDCommenterInvert
imap <C-Space> <C-X><C-O><C-P>

"iunmap <Leader> (Causes Delay when typing '\' in insert mode)
au VimEnter *
    \ iunmap \ihn|
    \ iunmap \is|
    \ iunmap \ih

" Syntax highlighting group under cursor
map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Stop AutoCommenting
au FileType * setlocal formatoptions-=cro

" Allow project specific .vimrc
set exrc
set secure

" GLSL File Detection
au BufNewFile,BufRead *vert set filetype=glsl
au BufNewFile,BufRead *frag set filetype=glsl

" h2cpp Settings
nmap <F3> :H2cppxAuto<CR>
let g:h2cppx_python_path = '/usr/bin/python2'

" TypeScript File Detection
au BufNewFile,BufRead *.ts set filetype=typescript

" Haskell Settings
" let g:ycm_semantic_triggers = { 'haskell': ['.'] }
" let g:necoghc_enable_detailed_browse = 1
" let g:ycm_filetype_blacklist = { 'haskell' : 1 }
let $PATH = $PATH . ':' . expand('~/.cabal/bin')
au Filetype haskell set ts=8 et sts=4 sw=4 sr

" delimitMate / CloseTag fix
let g:closetag_filenames = "*.xml,*.html,*.xhtml,*.phtml,*.php,*.htm"
au FileType xml,html,phtml,php,xhtml,js let b:delimitMate_matchpairs = "(:),[:],{:}"

"   Shakespearean Templates File Detection
au BufNewFile,BufRead *.hamlet set filetype=hamlet ts=2 et sts=2 sw=2
au BufNewFile,BufRead *.lucius set filetype=lucius ts=4 et sts=4 sw=4
au BufNewFile,BufRead *.cassius set filetype=cassius ts=4 et sts=4 sw=4
au BufNewFile,BufRead *.julius set filetype=julius ts=4 et sts=4 sw=4

au BufEnter,InsertLeave * syntax sync fromstart

" NASM filetype recognition
au BufNewFile,BufRead *.nasm set filetype=nasm

" Processing filetype settings (.pde)
au BufNewFile,BufRead *.pde set filetype=processing ts=2 et sts=2 sw=2

" Brainfuck filetype recognition
au BufNewFile,BufRead *.b set filetype=brainfuck

" ARM asm filetype recognition
let asmsyntax="armasm"
let filetype_inc="armasm"

" Vim-Tab Settings
let g:NERDTreeChDirMode=2

"below is reload GTAGS, ctags demo code.
function! TabReloadCGtag()
    "reload GTAGS in current directory
    cs kill 0
    "gnu global produce GTAGS, more useful than cscope
    cs add GTAGS
    "reload tags in current directory
    set tags=tags
endfunction

"some action when enter a tab
function! TabEnterTag(nr)
    "echo "tab ". a:nr . " enter"
    call TabReloadCGtag()
endfunction

"some action when leave a tab
function! TabLeaveTag(nr)
    "echo "tab ". a:nr . " leaves"
    "nothing
endfunction

"don't care about pattern field for now
let g:TabTagTrigger = {'name':'TabTagTriger','pattern':"", 'enter_callback':"TabEnterTag", 'leave_callback':"TabLeaveTag" }

"call tab#TabShowTrigger()
call tab#TabAddTrigger(g:TabTagTrigger)

"when first open a tab, the tab enter trigger will not be called,the following code load tags automatically when open a file
autocmd BufEnter *.[ch] call TabReloadCGtag()
autocmd BufEnter *.cpp call TabReloadCGtag()
autocmd BufEnter *.java call TabReloadCGtag()

" Javacomplete settings
" autocmd BufNewFile,BufRead *.java setlocal omnifunc=javacomplete#Complete

" nmap <F4> <Plug>(JavaComplete-Imports-AddSmart)
" imap <F4> <Plug>(JavaComplete-Imports-AddSmart)

" nmap <F5> <Plug>(JavaComplete-Imports-Add)
" imap <F5> <Plug>(JavaComplete-Imports-Add)

" nmap <F6> <Plug>(JavaComplete-Imports-AddMissing)
" imap <F6> <Plug>(JavaComplete-Imports-AddMissing)

" nmap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)
" imap <F7> <Plug>(JavaComplete-Imports-RemoveUnused)

let g:syntastic_java_checkers=['javac']
let g:syntastic_java_javac_config_file_enabled = 1

let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextOmniPrecedence = ["&omnifunc", "&completefunc"]
autocmd FileType php,java,ruby let g:EclimCompletionMethod = 'omnifunc'
autocmd FileType php,java,ruby set omnifunc=eclim#java#complete#CodeComplete
autocmd FileType php,java,ruby let g:ycm_cache_omnifunc = 0

" For your list of filetypes where you want Eclim semantic completion
" as the default YCM completion mode:

" autocmd FileType php,java,ruby,c,cpp,perl,python
    " \if &completefunc != '' | let &omnifunc=&completefunc | endif

set completeopt=menuone

" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Vim Airline settings
set ls=2
