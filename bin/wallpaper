#! /usr/bin/env bash

wallpaper_dir=$HOME/.wallpapers

LOAD=false
SAVE=false
INTERACTIVE=false
LIST_WALLS=false
RAW=false
DIM=false
BLUR=false
QUEUE_UPDATE=false;
PATTERN="*"
default_bg_color=$(xrdb -q | sed -n "s/^.*background:\s*\(#[A-Fa-f0-9]\{1,6\}\).*/\1/p")

current=$(cat $wallpaper_dir/.current)
if [[ $current =~ , ]]; then
    current=$(sed ":loop; s/^\s*,/_,/g; s/,\s*,/,_,/g; s/,\s*$/,_/g; s/,\s*::/,_::/g; t loop" <<< $current)
fi

function list {
    ls -1 $wallpaper_dir/ | egrep -v "SOURCES|download_errors|\.current" | perl -lne "print \$1 if /([a-zA-Z0-9_-]*)\.[a-z]*$/" | egrep "$PATTERN"
}

function add {
    name=$(sed "s/^[^\[]*\[\(.*\)\].*/\1/" <<< $1)
    src=$(sed "s/^[^\[]*\[.*\]\s*//" <<< $1)

    name=$(sed "s/^\(.*\)=.*$/\1/" <<< $1)
    src=$(sed "s/^.*=\s*\(.*\)\s*$/\1/" <<< $1)
    echo "["$name"] "$src >> $wallpaper_dir/SOURCES
}

function set_wall {
    if [[ $1 =~ , ]]; then
        compile $1 | tee >(feh --no-xinerama --bg-fill --conversion-timeout 10 -) > "$wallpaper_dir/.cached"
    elif [[ $1 =~ ^:: ]]; then
        screen_dims=$(xrandr -q | perl -lne "print \"\$1x\$2\" if /Screen.*current\s*([0-9]*)\s*x\s*([0-9]*)/")
        bg_color=$(perl -lne "print \$1 if /.*::(.*)/" <<< $1)
        bg_color=${bg_color:-"$default_bg_color"}
        convert -colorspace sRGB -size $screen_dims canvas:$bg_color png:- | feh --bg-fill --no-xinerama --conversionq-timeout 10 -
    else
        if $BLUR && $DIM; then
            convert -colorspace sRGB -size $screen_dims -blur 0x5 -fill black -colorize 40% png:- | feh --no-xinerama --bg-fill --conversion-timeout 10 - 2>/dev/null
        elif $BLUR; then
            convert -colorspace sRGB -size $screen_dims -blur 0x5 png:- | feh --no-xinerama --bg-fill --conversion-timeout 10 - 2>/dev/null
        elif $DIM; then
            convert -colorspace sRGB -size $screen_dims -fill black --colorize 40% png:- | feh --no-xinerama --bg-fill --conversion-timeout 10 - 2>/dev/null
        else
            feh --no-xinerama --bg-fill --conversion-timeout 10 $wallpaper_dir/$1.* 2>/dev/null
        fi
    fi
    echo "$1" > "$wallpaper_dir/.current"
}

function set_display {
    monitors=($(multihead_getMonitorOrder))
    if [[ $1 -le ${#monitors[@]} ]]; then
        OLDIFS=$IFS
        if [[ $current =~ , ]]; then
            IFS=","; read -ra tmp <<< $current
            tmp[$1-1]=$2
            current=$(echo "${tmp[*]}")
            IFS=$OLDIFS
        else
            bg="$(perl -lne "print \$1 if /.*::(.*)/" <<< $current)"
            declare -a tmp
            for ((i=0; i<${#monitors[@]}; ++i)); do
                if [[ $[$i+1] -eq $1 ]]; then
                    tmp[$i]=$2
                else
                    tmp[$i]="_"
                fi
            done
            IFS=","; current=$(echo "${tmp[*]}"); IFS=$OLDIFS
        fi
        set_wall $current
    fi
}

function save {
    local_var wallpaper=$1
}

function interactive {
    # Why have I done this...
    options=$(list | while read -r line; do identify "$wallpaper_dir/$line.*" | cut -f3 -d" " | xargs printf "%s (%s)\n" $line; done | (wait && awk "{printf(\"  %d) %s\n\", NR-1, \$0)}"))
    choice=0
    wall=-1
    while true; do
        clear
        echo "Choose one of the following wallpapers: "
        echo -e "$(sed "$[$choice+1] s/^.*$/[37;7m&[m/" <<< $options)"
        echo -e "\nControls:\n  ENTER: Apply wallpaper to all displays\n  [1-N]: Apply wallpaper to specific display\n  [F1-N]: Apply a solid background to specific display\n  ESC | q: Exit"
        echo -e "\e[$[$choice+1];f"
        while read -rsn1 ui; do
            case "$ui" in
                $'\x1b')    # Handle ESC sequence.
                    # Flush read. We account for sequences for Fx keys as
                    # well. 6 should suffice far more then enough.
                    read -rsn1 -t 0.01 tmp
                    case "$tmp" in
                        "[")
                            read -rsn1 -t 0.01 tmp
                            case "$tmp" in
                                "A") [ $choice -gt 0 ] && choice=$[$choice-1];;                    # Arrow Key (UP)
                                "B") [ $[$choice+1] -lt $(list | wc -l) ] && choice=$[$choice+1];; # Arrow Key (DOWN)
                                1|2)                                                               # Function Keys (F1-F9)
                                    read -rsn1 -t 0.01 tmp
                                    if [[ "$tmp" -eq "0" ]]; then
                                        tmp=10
                                    elif [[ "$tmp" -gt "6" ]]; then
                                        tmp=$[$tmp-1]
                                    fi
                                    set_display $tmp "_"
                                    ;;
                            esac
                            ;;
                        "") echo -e "\e[$[$(list | wc -l)+7];f"; break 2;;  # ESC Key
                    esac
                    # Flush "stdin" with 0.01  sec timeout.
                    read -rsn5 -t 0.01
                    break
                    ;;
                [1-9])
                    set_display $ui $(list | awk "NR==$choice+1") # Set display at <index> to <wall>
                    break
                    ;;
                '') current=$(list | awk "NR==$choice+1"); set_wall $current; break;;
                "q") echo -e "\e[$[$(list | wc -l)+7];f"; break 2;;
            esac
        done
    done
    if $SAVE; then
        save $current
    fi
}

function update {
    echo "Updating wallpapers..."
    while read -r line
    do
        [[ $line = "" ]] && continue
        name=$(sed "s/^[^\[]*\[\(.*\)\].*/\1/" <<< $line)
        src=$(sed "s/^[^\[]*\[.*\]\s*//" <<< $line)
        extension=$(awk -F. '{print $NF}' <<< $line)
        [[ -f $wallpaper_dir/$name.$extension ]] && continue
        echo "    $name"
        wget -nd -O "$wallpaper_dir/$name.$extension" -A jpg,jpeg,png,bmp $src > $wallpaper_dir/download_errors 2>&1
    done < "$wallpaper_dir/SOURCES"
}

function compile {
    screen_dims=$(xrandr -q | perl -lne "print \"\$1x\$2\" if /Screen.*current\s*([0-9]*)\s*x\s*([0-9]*)/")
    monitors=($(multihead_getMonitorOrder))
    bg_color=$(perl -lne "print \$1 if /.*::(.*)/" <<< $1)
    bg_color=${bg_color:-"$default_bg_color"}
    walls_formatted=$(echo "$1" | sed ":loop; s/^\s*,/_,/g; s/,\s*,/,_,/g; s/,\s*$/,_/g; s/::.*$//g; t loop")

    if [[ $1 =~ ^:: ]]; then
        >&2 echo "Setting solid wallpaper"
        return
    fi

    IFS="," read -ra walls <<< "$walls_formatted"
    if [ ${#monitors[@]} -ne ${#walls[@]} ]; then
        >&2 echo "ERROR: Given number of wallpapers doesn't match number of monitors"
        exit
    fi

    magick_command="convert -set colorspace sRGB -size $screen_dims canvas:$bg_color"
    for ((i=0; i<${#monitors[@]}; ++i)); do
        if [[ ${walls[i]} = "_" ]]; then
            continue;
        fi
        wall_file=$wallpaper_dir/${walls[i]}.*
        monitor_dims=$(xrandr -q | perl -lne "print \$1 if /${monitors[i]}.*\s([0-9]+x[0-9]+)/")
        monitor_offset=$(xrandr -q | perl -lne "print \$1 if /${monitors[i]}.*\s[0-9]+x[0-9]+(\+[0-9]+\+[0-9]+)\s/")

        magick_command+=" ( $wall_file -resize $monitor_dims^ -geometry $monitor_offset -gravity center -crop $monitor_dims+0+0"$($BLUR && echo " -blur 0x5")$($DIM && echo " -fill black -colorize 40%")" -gravity none ) -composite"
    done

    magick_command+=" png:-"
    exec $magick_command
}

function usage {
cat << EOF
wallpaper: wallpaper [-ilsu] [--pattern <pattern>] [wallpaper_setting]
    Options:
        -i, --interactive       Start the script in interactive mode.
                                allows for live viewing of wallpapers

        -l, --list              Show a list of wallpapers found in the
                                wallpaper directory.
                                (Currently set to ~/.wallpapers/)

        -s, --save              Save the chosen wallpaper to ~/.config/local

        -u, --update            Update the wallpapers in ~/.wallpapers using
                                the SOURCES file.

        -r, --get-raw           Returns the wallpaper image through stdout

        -p, --pattern <pattern> Filter the output of --list and the choices
                                in --interactive mode using the regex <pattern>

    Wallpaper Setting:
        <wallpaper>[,<wallpaper>,..][::<bg_color]
            <wallpaper>:        The name of the wallpaper in ~/.wallpapers,
                                without a file extension

            <bg_color>:         A Hexadecimal color code to set as the
                                background color for displays with no
                                wallpaper set. (Default: $default_bg_color)

        For multi-monitor setups additional wallpapers can be set for each
        display separated by commas
            e.g.: wall1,wall2,wall3

        wallpaper fields can be left blank, leaving that monitor with
        just the <bg_color>
            e.g: ,wall2,::$default_bg_color

        If you just want to set a solid wallpaper you can simply use:
            ::<bg_color>

    NOTE: This currently utilizes some local scripts, namely:
            multihead_getMonitorOrder (Ordering of monitors from left to right)
            local_var                 (Saving and loading current wallpaper settings)

EOF
}

TEMP=$(getopt -o "lsip:uhrbda:" --long "add:,load,list,save,interactive,pattern:,update,help,get-raw,blur,dim" -n "wallpaper" -- "$@")
eval set -- "$TEMP"

while true; do
    case "$1" in
        -l|--load) LOAD=true; shift;;
        --list) LIST_WALLS=true; shift;;
        -s|--save) SAVE=true; shift;;
        -i|--interactive) INTERACTIVE=true; shift;;
        -p|--pattern) PATTERN=$2; shift 2;;
        -d|--dim) DIM=true; shift;;
        -b|--blur) BLUR=true; shift;;
        -r|--get-raw) RAW=true; shift;;
        -u|--update) QUEUE_UPDATE=true; shift;;
        -a|--add) add $2; shift 2;;
        -h|--help) usage; exit; shift;;
        --) shift; break;;
    esac
done

if $QUEUE_UPDATE; then
    update
fi

if $LIST_WALLS; then
    list
    exit
fi
if $INTERACTIVE && $RAW; then
    echo "--interactive and --get-raw can not be run at the same time"
    exit
fi
if $LOAD; then
    if [ -f $wallpaper_dir/.cached ]; then
        feh --no-xinerama --bg-fill --conversion-timeout 10 $wallpaper_dir/.cached
    else
        set_wall $(local_var wallpaper)
    fi
fi
if $INTERACTIVE; then
    interactive
elif $RAW; then
    compile $current
elif [[ "$1" != "" ]]; then
    set_wall $1
    if $SAVE; then
        save $1
    fi
fi

if ! $RAW; then
    lock.sh -u &>/dev/null &
fi
