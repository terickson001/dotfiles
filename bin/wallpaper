#! /usr/bin/env bash

wallpaper_dir=$HOME/.wallpapers

SAVE=false
INTERACTIVE=false
LIST_WALLS=false
PATTERN="*"

function list {
    ls -1 $wallpaper_dir/ | egrep -v "SOURCES|download_errors" | perl -lne "print \$1 if /([a-zA-Z0-9_-]*)\.[a-z]*$/" | egrep "$PATTERN"
}

function set_wall {
    feh --no-xinerama --bg-fill $wallpaper_dir/$1.* 2>/dev/null 
}

function save {
    local_var wallpaper=$1
}

function interactive {
    # Why have I done this...
    options=$(list | while read -r line; do identify "$wallpaper_dir/$line.*" | cut -f3 -d" " | xargs printf "%s (%s)\n" $line; done | (wait && awk "{printf(\"  %d) %s\n\", NR-1, \$0)}"))
    choice=0
    wall=-1
    while true; do
        clear
        echo "Choose one of the following wallpapers: "
        echo -e "$(sed "$[$choice+1] s/^.*$/[37;7m&[m/" <<< $options)"
        while read -rsn1 ui; do
            case "$ui" in
                $'\x1b')    # Handle ESC sequence.
                    # Flush read. We account for sequences for Fx keys as
                    # well. 6 should suffice far more then enough.
                    read -rsn1 -t 0.01 tmp
                    if [[ "$tmp" == "[" ]]; then
                        read -rsn1 -t 0.01 tmp
                        case "$tmp" in
                            "A") [ $choice -ge 0 ] && choice=$[$choice-1];;
                            "B") [ $choice -lt $(list | wc -l) ] && choice=$[$choice+1];;
                        esac
                    fi
                    # Flush "stdin" with 0.01  sec timeout.
                    read -rsn5 -t 0.01
                    set_wall $(list | awk "NR==$choice+1")
                    break
                    ;;
                    # Other one byte (char) cases. Here only quit.
                '') break 2;;
            esac
        done      
    done
    if $SAVE; then
        save $(list | awk "NR==$choice+1")
    fi
}

function update {
    echo "Updating wallpapers..."
    while read -r line
    do
        [[ $line = "" ]] && continue
        name=$(sed "s/^[^\[]*\[\(.*\)\].*/\1/" <<< $line)
        src=$(sed "s/^[^\[]*\[.*\]\s*//" <<< $line)
        extension=$(awk -F. '{print $NF}' <<< $line)
        [[ -f $wallpaper_dir/$name.$extension ]] && continue
        echo "    $name"
        wget -nd -O "$wallpaper_dir/$name.$extension" -A jpg,jpeg,png,bmp $src > $wallpaper_dir/download_errors 2>&1
    done < "$wallpaper_dir/SOURCES"
}

function compile {
    screen_dims=$(xrandr -q | perl -lne "print \"\$1x\$2\" if /Screen.*current\s*([0-9]*)\s*x\s*([0-9]*)/")
    monitors=$(multihead_getMonitorOrder)

    IFS="," read -ra walls <<< "$1"
    if [ ${#monitors[@]} -ne ${#walls[@]} ]; then
        echo "ERROR: Given number of wallpapers doesn't match number of monitors"
        exit
    fi

    magick_command="convert -size $screen_dims canvas:#12171f"
    for ((i=0; i<${#monitors[@]}; ++i)); do
        wall_file=$wallpaper_dir/${walls[i]}.*
        monitor_dims=$(xrandr -q | perl -lne "print \$1 if /${monitors[i]}.*\s([0-9]+x[0-9]+)/")
        monitor_offset=$(xrandr -q | perl -lne "print \$1 if /${monitors[i]}.*\s[0-9]+x[0-9]+(\+[0-9]+\+[0-9]+)\s/")

        magick_command+=" \( $wall_file -geometry $monitor_dims^$monitor_offset -gravity center -crop $monitor_dims+0+0 -gravity none \) -composite"
    done

    magick_command+=" jpeg:-"
    exec $magick_command
}

TEMP=$(getopt -o "lsip:u" --long "list,save,interactive,pattern:,update" -n "wallpaper" -- "$@")
eval set -- "$TEMP"

while true; do
    case "$1" in
        -l|--list) LIST_WALLS=true; shift;;
        -s|--save) SAVE=true; shift;;
        -i|--interactive) INTERACTIVE=true; shift;;
        -p|--pattern) PATTERN=$2; shift 2;;
        -u|--updated) update; shift;;
        --) shift; break;;
    esac
done

if $LIST_WALLS; then
    list
    exit
elif $INTERACTIVE; then
    interactive
else
    if [[ $1 =~ , ]]; then
        set_wall <(compile $1)
    else
        set_wall $1
    fi
    if $SAVE; then
        save $1
    fi
fi
